'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _TemplateGenerator = require('./TemplateGenerator.js');

var _TemplateGenerator2 = _interopRequireDefault(_TemplateGenerator);

var _giffyconfig = require('../config/giffyconfig');

var _giffyconfig2 = _interopRequireDefault(_giffyconfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('console'),
    Console = _require.Console;
/**
 * Builder class is used to build out random templates.
 */


var Builder = function () {
    function Builder(name, type) {
        _classCallCheck(this, Builder);

        this.name = name;
        this.type = type;
    }

    _createClass(Builder, [{
        key: 'build',
        value: function build() {

            //Building the file structure with components tacked on the end for the page folder structure.
            var dirStruct = this.getDirectory();
            var existDirStruct = '';

            /**
             * @param  {string}
             * @return {array}
             * Cycling over each folder in the directory structure to identify if it exists, and if it does not create it. 
             * Once created it is added to the existing directory structure string. 
             */

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = dirStruct[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var dir = _step.value;

                    if (!_fs2.default.existsSync(existDirStruct + dir) && this.type !== 'config') {
                        _fs2.default.mkdirSync(existDirStruct + dir);
                    }
                    existDirStruct = existDirStruct + dir + '/';
                }
                /**
                 * Handles the file generation once directories have been built.
                 */
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            this.writeFile(existDirStruct);
            return (0, _TemplateGenerator2.default)(this.name, 'page');
        }
    }, {
        key: 'writeFile',
        value: function writeFile(struct) {
            var fileName = '';
            switch (this.type) {
                case 'page':
                    fileName = this.name + '.js';
                    if (!_fs2.default.existsSync(struct + 'components')) {
                        _fs2.default.mkdirSync(struct + 'components');
                    }

                    break;

                case 'action':
                    fileName = this.name;
                    (0, _giffyconfig2.default)().naming.action ? fileName += 'Action.js' : fileName = fileName + '.js';
                    break;

                case 'reducer':
                    fileName = this.name;
                    (0, _giffyconfig2.default)().naming.reducer ? fileName += 'Reducer.js' : fileName = fileName + '.js';
                    break;

                case 'config':
                    fileName = '.giffyconfig';
                    break;
            }
            this.type === 'config' ? struct : struct += '/';
            _fs2.default.writeFile(struct + fileName, (0, _TemplateGenerator2.default)(this.name, this.type), function (err) {
                if (err) throw err;
                return 'success';
            });
        }
    }, {
        key: 'getDirectory',
        value: function getDirectory() {
            var output = _fs2.default.createWriteStream('stdout.log');
            var errorOutput = _fs2.default.createWriteStream('stderr.log');
            var logger = new Console(output, errorOutput);

            logger.log('Directory mumbo: %s', (0, _giffyconfig2.default)().directories[this.type] + ('' + this.name.toLowerCase()));
            var dir = '';
            this.type == 'page' ? dir = ((0, _giffyconfig2.default)().directories[this.type] + ('' + this.name.toLowerCase())).split('/') : dir = (0, _giffyconfig2.default)().directories[this.type].split('/');

            return dir;
        }
    }]);

    return Builder;
}();

exports.default = Builder;