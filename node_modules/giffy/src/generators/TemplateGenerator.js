

function jsUcfirst(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

const getTemplate = function (name, type) {
    switch (type) {
        case 'config':
            return `{
			"directories": {
				"page": "client/src/components/pages/",
				"resource": "resources/",
				"action": "client/src/actions",
				"config": "./"
			},
			"naming": {
				"action": true,
				"reducer": true
			}
		}`;
            break;

        case 'stateless':

            return `const ${jsUcfirst(name)} = ${name} => (
		<div>Hi ${name} Page</div>
		);
		export default ${jsUcfirst(name)};`;

            break;
        case 'action':
            return `export function create${jsUcfirst(name)}(${name}){
			return { type: 'CREATE_${name.toUpperCase()}, ${name}'}
		}`;

            break;

        case 'page':
            return `import React from 'react';

		export default class ${name} extends React.Component{
			render(){
				return(
				<div >
				<h1>${name} Page</h1>
				</div>
				);
			}
		}`;
            break;

        case 'reducer':
            return `export default function ${name + 'Reducer'}(){
            
            
            }`;
            break;

        default:
            return 'Type not found: ' + type;
    }
}
//TODO: Addin logic if template type is not found.
export default getTemplate;