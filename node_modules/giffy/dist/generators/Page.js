'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _TemplateGenerator = require('./TemplateGenerator.js');

var _TemplateGenerator2 = _interopRequireDefault(_TemplateGenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function jsUcfirst(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
/**
 * Page class is used to generate a Page used in routing based on the url provided in config or the default setup. 
 */

var Page = function () {
  function Page(name) {
    _classCallCheck(this, Page);

    this.name = name;
  }

  _createClass(Page, [{
    key: 'build',
    value: function build() {

      //TODO: Add in init command which will generate the config file where the default value will be held here, and can be changed by users.

      var defaultStruct = 'tests/src/components/pages/';

      //Building the file structure with components tacked on the end for the page folder structure.
      var dirStructString = defaultStruct + this.name + '/components';
      var dirStruct = dirStructString.split('/');
      var existDirStruct = '';

      /**
       * @param  {string}
       * @return {array}
       * Cycling over each folder in the directory structure to identify if it exists, and if it does not create it. 
       * Once created it is added to the existing directory structure string. 
       */

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = dirStruct[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var dir = _step.value;


          if (!_fs2.default.existsSync(existDirStruct + dir)) {
            _fs2.default.mkdirSync(existDirStruct + dir);

            existDirStruct = existDirStruct + dir + '/';
          } else {
            existDirStruct = existDirStruct + dir + '/';
          }
        }
        /**
         * @param  {string}
         * @param  {string}
         * @param  {callback function}
         * @return {string}
         *
         * Takes in the file structure being used, creates the <Page>.js file with the template gathered from the getTemplate function.
         * Callback returns 'success' if it works, otherwise throws err.
         *
         * Followed by a return of the directory file path created. 
         */
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      _fs2.default.writeFile(defaultStruct + this.name + '/' + this.name + '.js', (0, _TemplateGenerator2.default)(this.name), function (err) {
        if (err) throw err;
        return 'success';
      });
      return (0, _TemplateGenerator2.default)(this.name);
    }
  }]);

  return Page;
}();

exports.default = Page;