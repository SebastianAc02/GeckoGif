{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nexport default function useNearScreen() {\n  _s();\n\n  let {\n    distance = '700px',\n    externalRef,\n    once = true\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [show, setShow] = useState(false);\n  const ref = useRef();\n  useEffect(function () {\n    let observer;\n    const el = externalRef ? externalRef.current : ref.current;\n\n    const onChange = (entries, observer) => {\n      const element = entries[0];\n\n      if (element.isIntersecting) {\n        setShow(true);\n        once && observer.disconnect();\n      } else {\n        !once && setShow(false);\n      }\n    };\n\n    Promise.resolve(typeof IntersectionObserver !== 'undefined' ? IntersectionObserver : import('intersection-observer')).then(() => {\n      observer = new IntersectionObserver(onChange, {\n        rootMargin: distance\n      }); //\n\n      observer.observe(el); //  observer.observe(ref.current)\n    });\n    return () => observer && observer.disconnect();\n  });\n  var x = x + 1;\n  console.log(show);\n  console.log(x);\n  return {\n    show,\n    ref\n  };\n}\n\n_s(useNearScreen, \"gA/s96N0xPoLh9/XoPY84kthx1c=\");","map":{"version":3,"names":["useState","useEffect","useRef","useNearScreen","distance","externalRef","once","show","setShow","ref","observer","el","current","onChange","entries","element","isIntersecting","disconnect","Promise","resolve","IntersectionObserver","then","rootMargin","observe","x","console","log"],"sources":["/Users/sebastianacosta/Bootcamp/giffy/src/hooks/isNearscreen.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\n\nexport  default  function useNearScreen({distance= '700px', \nexternalRef, once = true }= {}){\n\n    const [show , setShow] = useState(false)\n\n    const ref = useRef()\n\n\n    \n    useEffect(function(){\n\n        let observer\n\n       const el = externalRef? externalRef.current: ref.current\n\n\n      \n\n        const onChange = (entries, observer) =>{\n        \n            const element = entries[0]\n        \n            \n            if (element.isIntersecting)\n            {\n                setShow(true)\n\n               once && observer.disconnect()\n            }else{\n                !once && setShow(false)\n            }\n         \n        \n        }\n\n    \n\n    Promise.resolve(\n        typeof IntersectionObserver !== 'undefined'\n        ?\n        IntersectionObserver\n        :\n        import ('intersection-observer')\n    ).then(()=>{\n        observer = new IntersectionObserver(onChange, {\n            rootMargin: distance\n        })\n\n        //\n        observer.observe(el)\n\n        //  observer.observe(ref.current)\n    })\n\n    return () => observer && observer.disconnect()\n\n    })\n\n    var x = x+ 1 \n    console.log(show )\n    console.log(x)\n\n     return {show, ref}\n}"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,eAAiB,SAASC,aAAT,GACc;EAAA;;EAAA,IADS;IAACC,QAAQ,GAAE,OAAX;IACxCC,WADwC;IAC3BC,IAAI,GAAG;EADoB,CACT,uEAAH,EAAG;EAE3B,MAAM,CAACC,IAAD,EAAQC,OAAR,IAAmBR,QAAQ,CAAC,KAAD,CAAjC;EAEA,MAAMS,GAAG,GAAGP,MAAM,EAAlB;EAIAD,SAAS,CAAC,YAAU;IAEhB,IAAIS,QAAJ;IAED,MAAMC,EAAE,GAAGN,WAAW,GAAEA,WAAW,CAACO,OAAd,GAAuBH,GAAG,CAACG,OAAjD;;IAKC,MAAMC,QAAQ,GAAG,CAACC,OAAD,EAAUJ,QAAV,KAAsB;MAEnC,MAAMK,OAAO,GAAGD,OAAO,CAAC,CAAD,CAAvB;;MAGA,IAAIC,OAAO,CAACC,cAAZ,EACA;QACIR,OAAO,CAAC,IAAD,CAAP;QAEDF,IAAI,IAAII,QAAQ,CAACO,UAAT,EAAR;MACF,CALD,MAKK;QACD,CAACX,IAAD,IAASE,OAAO,CAAC,KAAD,CAAhB;MACH;IAGJ,CAfD;;IAmBJU,OAAO,CAACC,OAAR,CACI,OAAOC,oBAAP,KAAgC,WAAhC,GAEAA,oBAFA,GAIA,OAAQ,uBAAR,CALJ,EAMEC,IANF,CAMO,MAAI;MACPX,QAAQ,GAAG,IAAIU,oBAAJ,CAAyBP,QAAzB,EAAmC;QAC1CS,UAAU,EAAElB;MAD8B,CAAnC,CAAX,CADO,CAKP;;MACAM,QAAQ,CAACa,OAAT,CAAiBZ,EAAjB,EANO,CAQP;IACH,CAfD;IAiBA,OAAO,MAAMD,QAAQ,IAAIA,QAAQ,CAACO,UAAT,EAAzB;EAEC,CA/CQ,CAAT;EAiDA,IAAIO,CAAC,GAAGA,CAAC,GAAE,CAAX;EACAC,OAAO,CAACC,GAAR,CAAYnB,IAAZ;EACAkB,OAAO,CAACC,GAAR,CAAYF,CAAZ;EAEC,OAAO;IAACjB,IAAD;IAAOE;EAAP,CAAP;AACJ;;GA/DyBN,a"},"metadata":{},"sourceType":"module"}