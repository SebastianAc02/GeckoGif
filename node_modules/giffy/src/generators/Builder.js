import fs from 'fs';
import getTemplate from './TemplateGenerator.js';
import getConfig from '../config/giffyconfig';
const { Console } = require('console');
/**
 * Builder class is used to build out random templates.
 */
export default class Builder {
    constructor(name, type){
      this.name = name;
      this.type = type;
    }
        
    build() {




        //Building the file structure with components tacked on the end for the page folder structure.
        let dirStruct = this.getDirectory();
        let existDirStruct = '';
        
        /**
         * @param  {string}
         * @return {array}
         * Cycling over each folder in the directory structure to identify if it exists, and if it does not create it. 
         * Once created it is added to the existing directory structure string. 
         */
        
        for(let dir of dirStruct){
            if(!fs.existsSync(existDirStruct + dir) && this.type !== 'config'){
              fs.mkdirSync(existDirStruct + dir);
              
            }
            existDirStruct = existDirStruct + dir + '/';

          }
        /**
         * Handles the file generation once directories have been built.
         */
        this.writeFile(existDirStruct);
        return getTemplate(this.name, 'page');
    }

    writeFile(struct) {
        let fileName = '';
        switch (this.type){
            case ('page'):
                fileName = this.name  + '.js';
                if(!fs.existsSync(struct + 'components')){
                  fs.mkdirSync(struct + 'components');
                }
                
            break;

            case ('action'):
                fileName = this.name;
                getConfig().naming.action ? fileName += 'Action.js': fileName = fileName + '.js';
            break;

            case ('reducer'):
                fileName = this.name;
                getConfig().naming.reducer ? fileName += 'Reducer.js': fileName = fileName + '.js';
            break;

            case ('config'):
                fileName = '.giffyconfig';
            break;
        }
        this.type === 'config' ? struct:struct += '/';
        fs.writeFile(struct + fileName, getTemplate(this.name, this.type),(err) => {
            if (err) throw err;
            return 'success';
        });
    }

    getDirectory() {
        const output = fs.createWriteStream('stdout.log');
        const errorOutput = fs.createWriteStream('stderr.log');
        const logger = new Console(output, errorOutput);
        
        logger.log('Directory mumbo: %s', getConfig().directories[this.type] + `${this.name.toLowerCase()}`);            
        var dir = '';
        this.type == 'page' ? dir =  (getConfig().directories[this.type] + `${this.name.toLowerCase()}`).split('/'): dir = getConfig().directories[this.type].split('/');
        
        return dir;
    }
}


